// generating project:
// gradle init --type java-library
// $ gradle wrapper --gradle-version 6.5.1

// generating .gitignore 
// $ curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/windows,linux,macos,java,eclipse,intellij,netbeans,gradle > .gitignore

// copy elements from this file that you need

// multiprojects:
//   https://docs.gradle.org/current/userguide/multi_project_builds.html
//   https://rominirani.com/gradle-tutorial-part-3-multiple-java-projects-5b1c4d1fbd8d
//   example - https://gitlab.tel.fer.hr/dm/imo

plugins {
  id 'java'
    id 'eclipse'
    id 'com.github.ben-manes.versions' version '0.49.0' // find new versions of dependency task: dependencyUpdates
    id "com.peterabeles.gversion" version "1.10.2" // add version class in project
    id 'com.adarshr.test-logger' version '4.0.0' // log tests in console
    id "io.freefair.lombok" version "8.4"
    id 'org.graalvm.buildtools.native' version '0.9.28'
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco'
}

repositories {
    mavenCentral()
}

group = 'hr.fer.tel.crc'
archivesBaseName = 'CrcDiagram'
version = '0.2.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
        vendor = JvmVendorSpec.GRAAL_VM
    }
}

// enable preview features in compile
compileJava {
  //options.compilerArgs += ["--enable-preview"]
}

test {
    // runs tests with JUnit 5
    useJUnitPlatform()

    // enable preview features in tests
    //jvmArgs '--enable-preview'
}

// run all test except tagged with @Tag("integration")
// custom annotation example -> https://junit.org/junit5/docs/current/user-guide/#writing-tests-meta-annotations
task unitTest(type: Test) { Test task ->
    task.useJUnitPlatform { org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions options ->
        options.excludeTags 'integration'
    }
}

// logs running tests in console
testlogger {
    theme 'standard' // or 'plain'
}

// lombok
configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
    // lombok
    //   builders - https://www.baeldung.com/lombok-builder
    //compileOnly 'org.projectlombok:lombok:1.18.12'
    //annotationProcessor 'org.projectlombok:lombok'

    // Apache Commons Lang3
    //   equals, hashcode, toString builders - http://www.java2s.com/Tutorial/Java/0500__Apache-Common/EqualsBuilderreflectionEquals.htm
    //   tuple, triple
//    implementation 'org.apache.commons:commons-lang3:3.10'

    // java 11 missing dependencies
//    compile('javax.xml.bind:jaxb-api:2.3.1')
//    runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')

	implementation 'commons-cli:commons-cli:1.6.0'


    //////// TESTING /////////
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    // parametrized tests
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    // Mockito
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
    // AssertJ
    testImplementation 'org.assertj:assertj-core:3.24.2'
    // Test approvals
    testImplementation 'com.approvaltests:approvaltests:22.2.0'
}

graalvmNative {
    toolchainDetection = true
    binaries {
    	main {
    		javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(21)
                vendor = JvmVendorSpec.GRAAL_VM
            }
            imageName = "crcDiagram"
            mainClass = "hr.fer.tel.crc.cli.CrcDiagramApplication"
            buildArgs.add("--verbose")
        }
    }
}
/*
graal {
    mainClass 'hr.fer.tel.crc.cli.CrcDiagramApplication'
    outputName 'crcDiagram'
    graalVersion '23.1.0'
    javaVersion '17'
}
*/

task fatJar(type: Jar) {
	manifest {
    	attributes 'Main-Class': 'hr.fer.tel.crc.cli.CrcDiagramApplication'
  	}
  archiveBaseName = project.name + '-all'
  from({configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }}) {
  	// remove all signature files
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
  with jar
}

test {
  finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
  toolVersion = "0.8.9"
}

jacocoTestReport {
  reports {
    xml.required = true
    csv.required = false
    html.destination file("${buildDir}/jacocoHtml")
  }
}

sonarqube {
  properties {
    property 'sonar.java.coveragePlugin', "jacoco"
    property 'sonar.jacoco.reportPaths', "${project.buildDir}/jacoco/test.exec"
    property 'sonar.projectVersion', "${project.version}"
  }
}

tasks['sonarqube'].dependsOn test

// generation of version class
sourceSets.main.java.srcDirs += project.buildDir.name+'/generated-src/version/java'

gversion {
  srcDir       = "${buildDir}/generated-src/version/java/"
  classPackage = "hr.fer.tel.crc"
  className    = "ToolVersion"
}

project.compileJava.dependsOn(createVersionFile)

// to check for new dependencies run following
// $ gradle dependencyUpdates
